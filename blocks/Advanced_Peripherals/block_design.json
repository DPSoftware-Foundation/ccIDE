{
    "advanced_peripherals_chatbox_send_message": {
        "message0": "Chatbox %1 broadcast %2\nPrefix %3 Brackets %4 Bracket color %5 Range %6",
        "args0": [
            {
                "type": "input_value",
                "name": "CHATBOX",
                "check": "Peripheral"
            },
            {
                "type": "input_value",
                "name": "TEXT",
                "check": "String"
            },
            {
                "type": "input_value",
                "name": "PREFIX",
                "check": "String"
            },
            {
                "type": "input_value",
                "name": "BRACKET",
                "check": "String"
            },
            {
                "type": "input_value",
                "name": "BRACKETCOLOR",
                "check": "String"
            },
            {
                "type": "input_value",
                "name": "RANGE",
                "check": "Number"
            }
        ],
        "previousStatement": null,
        "nextStatement": null,
        "colour": 200,
        "tooltip": "Broadcast message to chat",
        "helpUrl": "https://docs.advanced-peripherals.de/peripherals/chat_box/#sendmessage"
    },
    "advanced_peripherals_chatbox_send_message_to_player": {
        "message0": "Chatbox %1 send %2 to player %3\nPrefix %4 Brackets %5 Bracket color %6 Range %7",
        "args0": [
            {
                "type": "input_value",
                "name": "CHATBOX",
                "check": "Peripheral"
            },
            {
                "type": "input_value",
                "name": "TEXT",
                "check": "String"
            },
            {
                "type": "input_value",
                "name": "PLAYER",
                "check": "String"
            },
            {
                "type": "input_value",
                "name": "PREFIX",
                "check": "String"
            },
            {
                "type": "input_value",
                "name": "BRACKET",
                "check": "String"
            },
            {
                "type": "input_value",
                "name": "BRACKETCOLOR",
                "check": "String"
            },
            {
                "type": "input_value",
                "name": "RANGE",
                "check": "Number"
            }
        ],
        "previousStatement": null,
        "nextStatement": null,
        "colour": 200,
        "tooltip": "Send message to player chat"
    },
    "advanced_peripherals_chatbox_send_toast_to_player": {
        "message0": "Chatbox %1 toast send %2 and title %3 to player %4\nPrefix %5 Brackets %6 Bracket color %7 Range %8",
        "args0": [
            {
                "type": "input_value",
                "name": "CHATBOX",
                "check": "Peripheral"
            },
            {
                "type": "input_value",
                "name": "TEXT",
                "check": "String"
            },
            {
                "type": "input_value",
                "name": "TITLE",
                "check": "String"
            },
            {
                "type": "input_value",
                "name": "PLAYER",
                "check": "String"
            },
            {
                "type": "input_value",
                "name": "PREFIX",
                "check": "String"
            },
            {
                "type": "input_value",
                "name": "BRACKET",
                "check": "String"
            },
            {
                "type": "input_value",
                "name": "BRACKETCOLOR",
                "check": "String"
            },
            {
                "type": "input_value",
                "name": "RANGE",
                "check": "Number"
            }
        ],
        "previousStatement": null,
        "nextStatement": null,
        "colour": 200,
        "tooltip": "Send message to player toast",
        "helpUrl": "https://docs.advanced-peripherals.de/peripherals/chat_box/#sendtoasttoplayer"
    },
    "advanced_peripherals_chatbox_send_message_formatted": {
        "message0": "Chatbox %1 broadcast formatted json %2\nPrefix %3 Brackets %4 Bracket color %5 Range %6",
        "args0": [
            {
                "type": "input_value",
                "name": "CHATBOX",
                "check": "Peripheral"
            },
            {
                "type": "input_value",
                "name": "JSON",
                "check": "String"
            },
            {
                "type": "input_value",
                "name": "PREFIX",
                "check": "String"
            },
            {
                "type": "input_value",
                "name": "BRACKET",
                "check": "String"
            },
            {
                "type": "input_value",
                "name": "BRACKETCOLOR",
                "check": "String"
            },
            {
                "type": "input_value",
                "name": "RANGE",
                "check": "Number"
            }
        ],
        "previousStatement": null,
        "nextStatement": null,
        "colour": 200,
        "tooltip": "Broadcast message to chat with formatted",
        "helpUrl": "https://docs.advanced-peripherals.de/peripherals/chat_box/#sendformattedmessage"
    },
    "advanced_peripherals_chatbox_send_message_formatted_to_player": {
        "message0": "Chatbox %1 send formatted json %2 to player %3\nPrefix %4 Brackets %5 Bracket color %6 Range %7",
        "args0": [
            {
                "type": "input_value",
                "name": "CHATBOX",
                "check": "Peripheral"
            },
            {
                "type": "input_value",
                "name": "JSON",
                "check": "String"
            },
            {
                "type": "input_value",
                "name": "PLAYER",
                "check": "String"
            },
            {
                "type": "input_value",
                "name": "PREFIX",
                "check": "String"
            },
            {
                "type": "input_value",
                "name": "BRACKET",
                "check": "String"
            },
            {
                "type": "input_value",
                "name": "BRACKETCOLOR",
                "check": "String"
            },
            {
                "type": "input_value",
                "name": "RANGE",
                "check": "Number"
            }
        ],
        "previousStatement": null,
        "nextStatement": null,
        "colour": 200,
        "tooltip": "Send message formatted to player chat"
    },
    "advanced_peripherals_chatbox_send_toast_formatted_to_player": {
        "message0": "Chatbox %1 toast send %2 and title %3 to player %4\nPrefix %5 Brackets %6 Bracket color %7 Range %8",
        "args0": [
            {
                "type": "input_value",
                "name": "CHATBOX",
                "check": "Peripheral"
            },
            {
                "type": "input_value",
                "name": "TEXT",
                "check": "String"
            },
            {
                "type": "input_value",
                "name": "TITLE",
                "check": "String"
            },
            {
                "type": "input_value",
                "name": "PLAYER",
                "check": "String"
            },
            {
                "type": "input_value",
                "name": "PREFIX",
                "check": "String"
            },
            {
                "type": "input_value",
                "name": "BRACKET",
                "check": "String"
            },
            {
                "type": "input_value",
                "name": "BRACKETCOLOR",
                "check": "String"
            },
            {
                "type": "input_value",
                "name": "RANGE",
                "check": "Number"
            }
        ],
        "previousStatement": null,
        "nextStatement": null,
        "colour": 200,
        "tooltip": "Send message formatted to player toast",
        "helpUrl": "https://docs.advanced-peripherals.de/peripherals/chat_box/#sendformattedtoasttoplayer"
    },

    "advanced_peripherals_energy_detector_get_transfer_rate": {
        "message0": "Get current transfer rate from detector %1",
        "args0": [
            {
                "type": "input_value",
                "name": "DETECTOR",
                "check": "Peripheral"
            }
        ],
        "output": "Number",
        "colour": 200,
        "tooltip": "Returns the current energy that is going through the block."
    },
    "advanced_peripherals_energy_detector_get_transfer_rate_limit": {
        "message0": "get transfer rate limit from detector %1",
        "args0": [
            {
                "type": "input_value",
                "name": "DETECTOR",
                "check": "Peripheral"
            }
        ],
        "output": "Number",
        "colour": 200,
        "tooltip": "Returns the max rate limit of energy through the block which has been set."
    },
    "advanced_peripherals_energy_detector_set_transfer_rate_limit": {
        "message0": "Set transfer rate limit to %1 FE for detector %2",
        "args0": [
            {
                "type": "input_value",
                "name": "TFRLIMIT",
                "check": "Number"
            },
            {
                "type": "input_value",
                "name": "DETECTOR",
                "check": "Peripheral"
            }
        ],
        "inputsInline": true,
        "previousStatement": null,
        "nextStatement": null,
        "colour": 200,
        "tooltip": "Set the max energy rate that will go through the block."
    },

    "advanced_peripherals_env_detector_get_biome": {
        "message0": "Get current biome from detector %1",
        "args0": [
            {
                "type": "input_value",
                "name": "DETECTOR",
                "check": "Peripheral"
            }
        ],
        "output": "String",
        "colour": 200,
        "tooltip": "Returns the current biome the block is in."
    },
    "advanced_peripherals_env_detector_get_block_light_level": {
        "message0": "Get current light level from detector %1",
        "args0": [
            {
                "type": "input_value",
                "name": "DETECTOR",
                "check": "Peripheral"
            }
        ],
        "output": "Number",
        "colour": 200,
        "tooltip": "Returns the block light level (0 to 15) at the detector block, this can be influenced by light sources"
    },
    "advanced_peripherals_env_detector_get_day_light_level": {
        "message0": "Get current day light level from detector %1",
        "args0": [
            {
                "type": "input_value",
                "name": "DETECTOR",
                "check": "Peripheral"
            }
        ],
        "output": "Number",
        "colour": 200,
        "tooltip": "Returns the day light level of the current world from 0 to 15. This is uneffected by blocks covering the peripheral."
    },
    "advanced_peripherals_env_detector_get_sky_light_level": {
        "message0": "Get current sky light level from detector %1",
        "args0": [
            {
                "type": "input_value",
                "name": "DETECTOR",
                "check": "Peripheral"
            }
        ],
        "output": "Number",
        "colour": 200,
        "tooltip": "Returns the current sky light level from 0 to 15 (like a daylight sensor)."
    },
    "advanced_peripherals_env_detector_get_dimension_name": {
        "message0": "Get current dimension name from detector %1",
        "args0": [
            {
                "type": "input_value",
                "name": "DETECTOR",
                "check": "Peripheral"
            }
        ],
        "output": "String",
        "colour": 200,
        "tooltip": "Returns the name of the current dimension (ex. overworld, the_nether or the_end)."
    },
    "advanced_peripherals_env_detector_get_dimension_PaN": {
        "message0": "Get current dimension PaN from detector %1",
        "args0": [
            {
                "type": "input_value",
                "name": "DETECTOR",
                "check": "Peripheral"
            }
        ],
        "output": "String",
        "colour": 200,
        "tooltip": "Similar to getDimensionName it returns the name of the dimension prefixed with the provider name (ex. minecraft:overworld)."
    },
    "advanced_peripherals_env_detector_get_dimension_provider": {
        "message0": "Get current dimension provider from detector %1",
        "args0": [
            {
                "type": "input_value",
                "name": "DETECTOR",
                "check": "Peripheral"
            }
        ],
        "output": "String",
        "colour": 200,
        "tooltip": "Returns the provider of the dimension (ex. minecraft)."
    },
    "advanced_peripherals_env_detector_get_moon_id": {
        "message0": "Get current moon phase id from detector %1",
        "args0": [
            {
                "type": "input_value",
                "name": "DETECTOR",
                "check": "Peripheral"
            }
        ],
        "output": "Number",
        "colour": 200,
        "tooltip": "Returns the current moon phase's id.",
        "helpUrl": "https://minecraft.wiki/w/Moon"
    },
    "advanced_peripherals_env_detector_get_moon_name": {
        "message0": "Get current moon phase name from detector %1",
        "args0": [
            {
                "type": "input_value",
                "name": "DETECTOR",
                "check": "Peripheral"
            }
        ],
        "output": "String",
        "colour": 200,
        "tooltip": "Returns the current moon phase's name.",
        "helpUrl": "https://minecraft.wiki/w/Moon"
    },
    "advanced_peripherals_env_detector_get_time": {
        "message0": "Get current time from detector %1",
        "args0": [
            {
                "type": "input_value",
                "name": "DETECTOR",
                "check": "Peripheral"
            }
        ],
        "output": "Number",
        "colour": 200,
        "tooltip": "Returns the daytime of the current world."
    },
    "advanced_peripherals_env_detector_get_radiation": {
        "message0": "Get current radiation from detector %1",
        "args0": [
            {
                "type": "input_value",
                "name": "DETECTOR",
                "check": "Peripheral"
            }
        ],
        "output": "Array",
        "colour": 200,
        "tooltip": "Returns the current radiation level from the Mekanism mod with the radiation unit. (Require Mekanism mod)"
    },
    "advanced_peripherals_env_detector_get_radiation_raw": {
        "message0": "Get current radiation raw from detector %1",
        "args0": [
            {
                "type": "input_value",
                "name": "DETECTOR",
                "check": "Peripheral"
            }
        ],
        "output": "Number",
        "colour": 200,
        "tooltip": "Returns the current raw radiation level in Sv/h. (Require Mekanism mod)"
    },
    "advanced_peripherals_env_detector_is_dimension": {
        "message0": "Is current dimension %1 from detector %2",
        "args0": [
            {
                "type": "input_value",
                "name": "DIMENSION",
                "check": "String"
            },
            {
                "type": "input_value",
                "name": "DETECTOR",
                "check": "Peripheral"
            }
        ],
        "output": "Boolean",
        "colour": 200,
        "tooltip": "Returns true if the current dimension matches the dimension parameter."
    },
    "advanced_peripherals_env_detector_is_moon": {
        "message0": "Is current moon phase id %1 from detector %2",
        "args0": [
            {
                "type": "input_value",
                "name": "MOONID",
                "check": "Number"
            },
            {
                "type": "input_value",
                "name": "DETECTOR",
                "check": "Peripheral"
            }
        ],
        "output": "Boolean",
        "colour": 200,
        "tooltip": "Returns true if the current moon phase matches the moonPhaseId parameter.",
        "helpUrl": "https://minecraft.wiki/w/Moon"
    },
    "advanced_peripherals_env_detector_is_raining": {
        "message0": "Is current raining from detector %1",
        "args0": [
            {
                "type": "input_value",
                "name": "DETECTOR",
                "check": "Peripheral"
            }
        ],
        "output": "Boolean",
        "colour": 200,
        "tooltip": "Returns true if it is raining."
    },
    "advanced_peripherals_env_detector_is_sunny": {
        "message0": "Is current sunny from detector %1",
        "args0": [
            {
                "type": "input_value",
                "name": "DETECTOR",
                "check": "Peripheral"
            }
        ],
        "output": "Boolean",
        "colour": 200,
        "tooltip": "Returns true if it is sunny."
    },
    "advanced_peripherals_env_detector_is_thunder": {
        "message0": "Is current thunder from detector %1",
        "args0": [
            {
                "type": "input_value",
                "name": "DETECTOR",
                "check": "Peripheral"
            }
        ],
        "output": "Boolean",
        "colour": 200,
        "tooltip": "Returns true if it is thundering."
    },
    "advanced_peripherals_env_detector_is_slime_chunk": {
        "message0": "Is current slime chunk from detector %1",
        "args0": [
            {
                "type": "input_value",
                "name": "DETECTOR",
                "check": "Peripheral"
            }
        ],
        "output": "Boolean",
        "colour": 200,
        "tooltip": "Returns true if the current chunk is a slime chunk."
    },
    "advanced_peripherals_env_detector_list_dimensions": {
        "message0": "List all dimensions from detector %1",
        "args0": [
            {
                "type": "input_value",
                "name": "DETECTOR",
                "check": "Peripheral"
            }
        ],
        "output": "Array",
        "colour": 200,
        "tooltip": "Returns a table with all of the registered dimensions for the current world, this includes modded dimensions."
    },
    "advanced_peripherals_env_detector_scan_entities": {
        "message0": "Scan entities in range %1 blocks from detector %2",
        "args0": [
            {
                "type": "input_value",
                "name": "BLOCKSRANGE",
                "check": "Number"
            },
            {
                "type": "input_value",
                "name": "DETECTOR",
                "check": "Peripheral"
            }
        ],
        "inputsInline": true,
        "output": "Array",
        "colour": 200,
        "tooltip": "Returns a table with all entities in the given range Coordinates are relativ and not absolute"
    },

    "advanced_peripherals_player_detector_get_player_pos": {
        "message0": "Get player %1 information from detector %2",
        "args0": [
            {
                "type": "input_value",
                "name": "PLAYER",
                "check": "String"
            },
            {
                "type": "input_value",
                "name": "DETECTOR",
                "check": "Peripheral"
            }
        ],
        "inputsInline": true,
        "output": "Array",
        "colour": 200,
        "tooltip": "Returns information about the player with the username passed.",
        "helpUrl": "https://advancedperipherals.netlify.app/peripherals/player_detector/#getplayerpos-getplayer"
    },
    "advanced_peripherals_player_detector_get_online_player": {
        "message0": "Get current online player from detector %1",
        "args0": [
            {
                "type": "input_value",
                "name": "DETECTOR",
                "check": "Peripheral"
            }
        ],
        "inputsInline": true,
        "output": "Array",
        "colour": 200,
        "tooltip": "Returns a list of all online players."
    },
    "advanced_peripherals_player_detector_get_player_in_range": {
        "message0": "Get player in range %1 from detector %2",
        "args0": [
            {
                "type": "input_value",
                "name": "RANGE",
                "check": "Number"
            },
            {
                "type": "input_value",
                "name": "DETECTOR",
                "check": "Peripheral"
            }
        ],
        "inputsInline": true,
        "output": "Array",
        "colour": 200,
        "tooltip": "The center of the range is the Player Detector peripheral and not the Computer."
    },
    "advanced_peripherals_player_detector_get_players_in_coords": {
        "message0": "Get all player in area\nFrom X %1 Y %2 Z %3\nTo X %4 Y %5 Z %6\nFrom detector %7",
        "args0": [
            {
                "type": "input_value",
                "name": "FX",
                "check": "Number"
            },
            {
                "type": "input_value",
                "name": "FY",
                "check": "Number"
            },
            {
                "type": "input_value",
                "name": "FZ",
                "check": "Number"
            },
            {
                "type": "input_value",
                "name": "TX",
                "check": "Number"
            },
            {
                "type": "input_value",
                "name": "TY",
                "check": "Number"
            },
            {
                "type": "input_value",
                "name": "TZ",
                "check": "Number"
            },
            {
                "type": "input_value",
                "name": "DETECTOR",
                "check": "Peripheral"
            }
        ],
        "inputsInline": true,
        "output": "Array",
        "colour": 200,
        "tooltip": "Returns a list of players within the 2 positions."
    },
    "advanced_peripherals_player_detector_get_players_in_cubic": {
        "message0": "Get all player in cube\nWidth %1 Height %2 Depth %3\nat detector %4",
        "args0": [
            {
                "type": "input_value",
                "name": "WIDTH",
                "check": "Number"
            },
            {
                "type": "input_value",
                "name": "HEIGHT",
                "check": "Number"
            },
            {
                "type": "input_value",
                "name": "DEPTH",
                "check": "Number"
            },
            {
                "type": "input_value",
                "name": "DETECTOR",
                "check": "Peripheral"
            }
        ],
        "inputsInline": true,
        "output": "Array",
        "colour": 200,
        "tooltip": "Returns a list of players within a cuboid centered at the peripheral."
    },
    "advanced_peripherals_player_detector_is_player_in_range": {
        "message0": "Is player %1 in range %2 from detector %3",
        "args0": [
            {
                "type": "input_value",
                "name": "PLAYER",
                "check": "String"
            },
            {
                "type": "input_value",
                "name": "RANGE",
                "check": "Number"
            },
            {
                "type": "input_value",
                "name": "DETECTOR",
                "check": "Peripheral"
            }
        ],
        "inputsInline": true,
        "output": "Boolean",
        "colour": 200,
        "tooltip": "Returns true if the player whose username matches the provided username is within the given range of the peripheral."
    },
    "advanced_peripherals_player_detector_is_player_in_coords": {
        "message0": "Is player %1 in area\nFrom X %2 Y %3 Z %4\nTo X %5 Y %6 Z %7\nFrom detector %8",
        "args0": [
            {
                "type": "input_value",
                "name": "PLAYER",
                "check": "String"
            },
            {
                "type": "input_value",
                "name": "FX",
                "check": "Number"
            },
            {
                "type": "input_value",
                "name": "FY",
                "check": "Number"
            },
            {
                "type": "input_value",
                "name": "FZ",
                "check": "Number"
            },
            {
                "type": "input_value",
                "name": "TX",
                "check": "Number"
            },
            {
                "type": "input_value",
                "name": "TY",
                "check": "Number"
            },
            {
                "type": "input_value",
                "name": "TZ",
                "check": "Number"
            },
            {
                "type": "input_value",
                "name": "DETECTOR",
                "check": "Peripheral"
            }
        ],
        "inputsInline": true,
        "output": "Boolean",
        "colour": 200,
        "tooltip": "Returns true if the player is within the 2 positions."
    },
    "advanced_peripherals_player_detector_is_player_in_cubic": {
        "message0": "Is player %1 in cube\nWidth %2 Height %3 Depth %4\nat detector %5",
        "args0": [
            {
                "type": "input_value",
                "name": "PLAYER",
                "check": "String"
            },
            {
                "type": "input_value",
                "name": "WIDTH",
                "check": "Number"
            },
            {
                "type": "input_value",
                "name": "HEIGHT",
                "check": "Number"
            },
            {
                "type": "input_value",
                "name": "DEPTH",
                "check": "Number"
            },
            {
                "type": "input_value",
                "name": "DETECTOR",
                "check": "Peripheral"
            }
        ],
        "inputsInline": true,
        "output": "Boolean",
        "colour": 200,
        "tooltip": "Returns true if any player is within the cuboid centered at the peripheral."
    },
    "advanced_peripherals_player_detector_is_players_in_range": {
        "message0": "Is players in range %1 from detector %2",
        "args0": [
            {
                "type": "input_value",
                "name": "RANGE",
                "check": "Number"
            },
            {
                "type": "input_value",
                "name": "DETECTOR",
                "check": "Peripheral"
            }
        ],
        "inputsInline": true,
        "output": "Boolean",
        "colour": 200,
        "tooltip": "Returns true if there is any player in the given range."
    },
    "advanced_peripherals_player_detector_is_players_in_coords": {
        "message0": "Is players in area\nFrom X %1 Y %2 Z %3\nTo X %4 Y %5 Z %6\nFrom detector %7",
        "args0": [
            {
                "type": "input_value",
                "name": "FX",
                "check": "Number"
            },
            {
                "type": "input_value",
                "name": "FY",
                "check": "Number"
            },
            {
                "type": "input_value",
                "name": "FZ",
                "check": "Number"
            },
            {
                "type": "input_value",
                "name": "TX",
                "check": "Number"
            },
            {
                "type": "input_value",
                "name": "TY",
                "check": "Number"
            },
            {
                "type": "input_value",
                "name": "TZ",
                "check": "Number"
            },
            {
                "type": "input_value",
                "name": "DETECTOR",
                "check": "Peripheral"
            }
        ],
        "inputsInline": true,
        "output": "Boolean",
        "colour": 200,
        "tooltip": "Returns true if any player is within the 2 positions."
    },
    "advanced_peripherals_player_detector_is_players_in_cubic": {
        "message0": "Is players in cube\nWidth %1 Height %2 Depth %3\nat detector %4",
        "args0": [
            {
                "type": "input_value",
                "name": "WIDTH",
                "check": "Number"
            },
            {
                "type": "input_value",
                "name": "HEIGHT",
                "check": "Number"
            },
            {
                "type": "input_value",
                "name": "DEPTH",
                "check": "Number"
            },
            {
                "type": "input_value",
                "name": "DETECTOR",
                "check": "Peripheral"
            }
        ],
        "inputsInline": true,
        "output": "Boolean",
        "colour": 200,
        "tooltip": "Returns true if any player is within the cuboid centered at the peripheral."
    },

    "advanced_peripherals_inv_manager_add_item_to_player": {
        "message0": "Add item\nName %1 to slot %2 with count %3 items\nTo player from chest side %4 with manager %5",
        "args0": [
            {
                "type": "input_value",
                "name": "ITEM",
                "check": "String"
            },
            {
                "type": "input_value",
                "name": "TOSLOT",
                "check": "Number"
            },
            {
                "type": "input_value",
                "name": "COUNT",
                "check": "Number"
            },
            {
                "type": "field_dropdown",
                "name": "SIDE",
                "options": [
                    ["Top", "top"],
                    ["Bottom", "bottom"],
                    ["North", "north"],
                    ["East", "east"],
                    ["West", "west"],
                    ["South", "south"]
                ]
            },
            {
                "type": "input_value",
                "name": "MANAGER",
                "check": "Peripheral"
            }
        ],
        "inputsInline": true,
        "previousStatement": null,
        "nextStatement": null,
        "colour": 200,
        "tooltip": "Adds an item to the player's inventory and returns the amount of the item added. The direction is the direction of the container relative to the peripheral.",
        "helpUrl": "https://advancedperipherals.netlify.app/peripherals/inventory_manager/#additemtoplayer"
    },
    "advanced_peripherals_inv_manager_remove_item_from_player": {
        "message0": "Remove item\nName %1 from slot %2 with count %3 items\nTo slot %4 in chest side %5 with manager %6",
        "args0": [
            {
                "type": "input_value",
                "name": "ITEM",
                "check": "String"
            },
            {
                "type": "input_value",
                "name": "FROMSLOT",
                "check": "Number"
            },
            {
                "type": "input_value",
                "name": "COUNT",
                "check": "Number"
            },
            {
                "type": "input_value",
                "name": "TOSLOT",
                "check": "Number"
            },
            {
                "type": "field_dropdown",
                "name": "SIDE",
                "options": [
                    ["Top", "top"],
                    ["Bottom", "bottom"],
                    ["North", "north"],
                    ["East", "east"],
                    ["West", "west"],
                    ["South", "south"]
                ]
            },
            {
                "type": "input_value",
                "name": "MANAGER",
                "check": "Peripheral"
            }
        ],
        "inputsInline": true,
        "previousStatement": null,
        "nextStatement": null,
        "colour": 200,
        "tooltip": "Removes an item from the player's inventory and returns the amount of the item removed. The direction is the direction of the container relative to the peripheral to put the item into."
    },
    "advanced_peripherals_inv_manager_get_armor": {
        "message0": "Get armor from player with manager %1",
        "args0": [
            {
                "type": "input_value",
                "name": "MANAGER",
                "check": "Peripheral"
            }
        ],
        "output": "Array",
        "colour": 200,
        "tooltip": "Returns a list of the player's current armor slots.",
        "helpUrl": "https://advancedperipherals.netlify.app/peripherals/inventory_manager/#getarmor"
    },
    "advanced_peripherals_inv_manager_get_items": {
        "message0": "Get items from player with manager %1",
        "args0": [
            {
                "type": "input_value",
                "name": "MANAGER",
                "check": "Peripheral"
            }
        ],
        "output": "Array",
        "colour": 200,
        "tooltip": "Returns the contents of the player's inventory as a list of items.",
        "helpUrl": "https://advancedperipherals.netlify.app/peripherals/inventory_manager/#getitems"
    },
    "advanced_peripherals_inv_manager_get_owner": {
        "message0": "Get current player owner from manager %1",
        "args0": [
            {
                "type": "input_value",
                "name": "MANAGER",
                "check": "Peripheral"
            }
        ],
        "output": "String",
        "colour": 200,
        "tooltip": "Returns the username of the owner of the memory card in the manager or nil if there is no memory card or owner."
    },
    "advanced_peripherals_inv_manager_is_player_equipped": {
        "message0": "Is player equipped from manager %1",
        "args0": [
            {
                "type": "input_value",
                "name": "MANAGER",
                "check": "Peripheral"
            }
        ],
        "output": "Boolean",
        "colour": 200,
        "tooltip": "Returns true if the player is wearing atleast one piece of armor."
    },
    "advanced_peripherals_inv_manager_is_wearing": {
        "message0": "Is player wearing in slot %1 from manager %2",
        "args0": [
            {
                "type": "input_value",
                "name": "SLOT",
                "check": "Number"
            },
            {
                "type": "input_value",
                "name": "MANAGER",
                "check": "Peripheral"
            }
        ],
        "output": "Boolean",
        "colour": 200,
        "tooltip": "Returns true if the player is wearing a armor piece on the given slot."
    },
    "advanced_peripherals_inv_manager_get_item_in_hand": {
        "message0": "Get current item in player hand from manager %1",
        "args0": [
            {
                "type": "input_value",
                "name": "MANAGER",
                "check": "Peripheral"
            }
        ],
        "output": "Array",
        "colour": 200,
        "tooltip": "Returns the item in the player's main hand.",
        "helpUrl": "https://advancedperipherals.netlify.app/peripherals/inventory_manager/#getiteminhand"
    },
    "advanced_peripherals_inv_manager_get_item_in_offhand": {
        "message0": "Get current item in player off hand from manager %1",
        "args0": [
            {
                "type": "input_value",
                "name": "MANAGER",
                "check": "Peripheral"
            }
        ],
        "output": "Array",
        "colour": 200,
        "tooltip": "Returns the item in the player's off hand.",
        "helpUrl": "https://advancedperipherals.netlify.app/peripherals/inventory_manager/#getiteminoffhand"
    },
    "advanced_peripherals_inv_manager_get_free_slot": {
        "message0": "Get free slot in player from manager %1",
        "args0": [
            {
                "type": "input_value",
                "name": "MANAGER",
                "check": "Peripheral"
            }
        ],
        "output": "Number",
        "colour": 200,
        "tooltip": "Returns the next free slot in the player's inventory. Or -1 if their inventory is full."    },
    "advanced_peripherals_inv_manager_is_space_available": {
        "message0": "Is player space available from manager %1",
        "args0": [
            {
                "type": "input_value",
                "name": "MANAGER",
                "check": "Peripheral"
            }
        ],
        "output": "Number",
        "colour": 200,
        "tooltip": "Returns true if space is available in the player's inventory."    
    },
    "advanced_peripherals_inv_manager_get_empty_space": {
        "message0": "Get empty space in player from manager %1",
        "args0": [
            {
                "type": "input_value",
                "name": "MANAGER",
                "check": "Peripheral"
            }
        ],
        "output": "Number",
        "colour": 200,
        "tooltip": "Returns the number of empty slots in the player's inventory."    
    },

    "advanced_peripherals_nbt_storage_read": {
        "message0": "Read nbt with nbt storage %1",
        "args0": [
            {
                "type": "input_value",
                "name": "NBTDEV",
                "check": "Peripheral"
            }
        ],
        "output": "Array",
        "colour": 200,
        "tooltip": "Returns the NBT data stored in the block."    
    },
    "advanced_peripherals_nbt_storage_write_json": {
        "message0": "Write json %1 To block with nbt storage %2",
        "args0": [
            {
                "type": "input_value",
                "name": "NBTJSON",
                "check": "String"
            },
            {
                "type": "input_value",
                "name": "NBTDEV",
                "check": "Peripheral"
            }
        ],
        "output": "Array",
        "colour": 200,
        "tooltip": "Writes the json as NBT data into the block."    
    },
    "advanced_peripherals_nbt_storage_write_table": {
        "message0": "Write nbt %1 To block nbt storage %2",
        "args0": [
            {
                "type": "input_value",
                "name": "NBT",
                "check": "Array"
            },
            {
                "type": "input_value",
                "name": "NBTDEV",
                "check": "Peripheral"
            }
        ],
        "output": "Array",
        "colour": 200,
        "tooltip": "Writes NBT data into the block.",
        "helpUrl": "https://advancedperipherals.netlify.app/peripherals/nbt_storage/#writetable"
    },

    "advanced_peripherals_block_reader_get_block_name": {
        "message0": "Get current block name in front of reader %1",
        "args0": [
            {
                "type": "input_value",
                "name": "READER",
                "check": "Peripheral"
            }
        ],
        "output": "String",
        "colour": 200,
        "tooltip": "Returns the registry name of the block (ex. minecraft:dirt)"
    },
    "advanced_peripherals_block_reader_get_block_data": {
        "message0": "Get current block data in front of reader %1",
        "args0": [
            {
                "type": "input_value",
                "name": "READER",
                "check": "Peripheral"
            }
        ],
        "output": "Array",
        "colour": 200,
        "tooltip": "Returns the block data of the block if block is a tile entity."
    },
    "advanced_peripherals_block_reader_get_block_states": {
        "message0": "Get current block states in front of reader %1",
        "args0": [
            {
                "type": "input_value",
                "name": "READER",
                "check": "Peripheral"
            }
        ],
        "output": "Array",
        "colour": 200,
        "tooltip": "Returns the properties of a block and its state."
    },
    "advanced_peripherals_block_reader_is_tile_entity": {
        "message0": "Is entity in front of reader %1",
        "args0": [
            {
                "type": "input_value",
                "name": "READER",
                "check": "Peripheral"
            }
        ],
        "output": "Boolean",
        "colour": 200,
        "tooltip": "Returns true whether the block is a tile entity or not."
    },

    "advanced_peripherals_geo_scanner_get_fuel_level": {
        "message0": "Get current fuel level from scanner %1",
        "args0": [
            {
                "type": "input_value",
                "name": "SCANNER",
                "check": "Peripheral"
            }
        ],
        "output": "Number",
        "colour": 200,
        "tooltip": "Returns the amount of stored fuel."
    },
    "advanced_peripherals_geo_scanner_get_max_fuel_level": {
        "message0": "Get max fuel level from scanner %1",
        "args0": [
            {
                "type": "input_value",
                "name": "SCANNER",
                "check": "Peripheral"
            }
        ],
        "output": "Number",
        "colour": 200,
        "tooltip": "Returns the maximum amount of possible stored fuel."
    },
    "advanced_peripherals_geo_scanner_cost": {
        "message0": "Calculate cost for scan in radius %1 with scanner %2",
        "args0": [
            {
                "type": "input_value",
                "name": "RADIUS",
                "check": "Number"
            },
            {
                "type": "input_value",
                "name": "SCANNER",
                "check": "Peripheral"
            }
        ],
        "output": "Number",
        "colour": 200,
        "tooltip": "Returns the cost in FE for a scan with the given radius."
    },
    "advanced_peripherals_geo_scanner_scan": {
        "message0": "Scan in radius %1 with scanner %2",
        "args0": [
            {
                "type": "input_value",
                "name": "RADIUS",
                "check": "Number"
            },
            {
                "type": "input_value",
                "name": "SCANNER",
                "check": "Peripheral"
            }
        ],
        "output": ["Array", "String"],
        "colour": 200,
        "tooltip": "Returns a list of data about all blocks in the radius. Or if the scan fails it returns nil and an error message.",
        "helpUrl": "https://advancedperipherals.netlify.app/peripherals/geo_scanner/#scan"
    },
    "advanced_peripherals_geo_get_scan_cooldown": {
        "message0": "Get cooldown scan time from scanner %1",
        "args0": [
            {
                "type": "input_value",
                "name": "SCANNER",
                "check": "Peripheral"
            }
        ],
        "output": "Number",
        "colour": 200,
        "tooltip": "Returns the current time remaining until then next scan() can be ran."    
    },
    "advanced_peripherals_geo_chunk_analyze": {
        "message0": "Analyze current chunk with scanner %1",
        "args0": [
            {
                "type": "input_value",
                "name": "SCANNER",
                "check": "Peripheral"
            }
        ],
        "output": ["Array", "String"],
        "colour": 200,
        "tooltip": "Returns a table of data about how many of each ore type is in the block's chunk. Or if the analyze fails it returns nil and an error message."    
    },

    "advanced_peripherals_redstone_integrator_get_input": {
        "message0": "Get redstone input from side %1 of integrator %2",
        "args0": [
            {
                "type": "field_dropdown",
                "name": "SIDE",
                "options": [
                    ["Top", "top"],
                    ["Bottom", "bottom"],
                    ["North", "north"],
                    ["East", "east"],
                    ["West", "west"],
                    ["South", "south"]
                ]
            },
            {
                "type": "input_value",
                "name": "INTEGRATOR",
                "check": "Peripheral"
            }
        ],
        "output": "Boolean",
        "colour": 200,
        "tooltip": "Returns true or false depending on if the redstone at the given side is on."    
    },
    "advanced_peripherals_redstone_integrator_get_output": {
        "message0": "Get redstone output from side %1 of integrator %2",
        "args0": [
            {
                "type": "field_dropdown",
                "name": "SIDE",
                "options": [
                    ["Top", "top"],
                    ["Bottom", "bottom"],
                    ["North", "north"],
                    ["East", "east"],
                    ["West", "west"],
                    ["South", "south"]
                ]
            },
            {
                "type": "input_value",
                "name": "INTEGRATOR",
                "check": "Peripheral"
            }
        ],
        "output": "Boolean",
        "colour": 200,
        "tooltip": "Returns true or false depending on if the Redstone Integrator is sending a signal to the given side."    
    },
    "advanced_peripherals_redstone_integrator_get_analog_input": {
        "message0": "Get redstone analog input from side %1 of integrator %2",
        "args0": [
            {
                "type": "field_dropdown",
                "name": "SIDE",
                "options": [
                    ["Top", "top"],
                    ["Bottom", "bottom"],
                    ["North", "north"],
                    ["East", "east"],
                    ["West", "west"],
                    ["South", "south"]
                ]
            },
            {
                "type": "input_value",
                "name": "INTEGRATOR",
                "check": "Peripheral"
            }
        ],
        "output": "Number",
        "colour": 200,
        "tooltip": "Returns the redstone level input on the given side. (0-15)"    
    },
    "advanced_peripherals_redstone_integrator_get_analog_output": {
        "message0": "Get redstone analog output from side %1 of integrator %2",
        "args0": [
            {
                "type": "field_dropdown",
                "name": "SIDE",
                "options": [
                    ["Top", "top"],
                    ["Bottom", "bottom"],
                    ["North", "north"],
                    ["East", "east"],
                    ["West", "west"],
                    ["South", "south"]
                ]
            },
            {
                "type": "input_value",
                "name": "INTEGRATOR",
                "check": "Peripheral"
            }
        ],
        "output": "Number",
        "colour": 200,
        "tooltip": "Returns the redstone level being output by the Redstone Integrator on the given side. (0-15)"    
    },
    "advanced_peripherals_redstone_integrator_set_output": {
        "message0": "Set redstone output %1 to side %2 of integrator %3",
        "args0": [
            {
                "type": "field_dropdown",
                "name": "POWERED",
                "options": [
                    ["On", "ON"],
                    ["Off", "OFF"]
                ]
            },
            {
                "type": "field_dropdown",
                "name": "SIDE",
                "options": [
                    ["Top", "top"],
                    ["Bottom", "bottom"],
                    ["North", "north"],
                    ["East", "east"],
                    ["West", "west"],
                    ["South", "south"]
                ]
            },
            {
                "type": "input_value",
                "name": "INTEGRATOR",
                "check": "Peripheral"
            }
        ],
        "previousStatement": null,
        "nextStatement": null,
        "colour": 200,
        "tooltip": "Sets the redstone level output to 0 or 15 on the given side depending on powered."    
    },
    "advanced_peripherals_redstone_integrator_set_analog_output": {
        "message0": "Set redstone analog output level %1 to side %2 of integrator %3",
        "args0": [
            {
                "type": "input_value",
                "name": "POWER",
                "check": "Number"
            },
            {
                "type": "field_dropdown",
                "name": "SIDE",
                "options": [
                    ["Top", "top"],
                    ["Bottom", "bottom"],
                    ["North", "north"],
                    ["East", "east"],
                    ["West", "west"],
                    ["South", "south"]
                ]
            },
            {
                "type": "input_value",
                "name": "INTEGRATOR",
                "check": "Peripheral"
            }
        ],
        "previousStatement": null,
        "nextStatement": null,
        "colour": 200,
        "tooltip": "Sets the redstone level output on the given side to the given power level. (0-15)"    
    }
}
